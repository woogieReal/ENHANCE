/**
* <pre>
* com.sist.feb.interest.dao
* Class Name : InterestDao.java
* Description:
* Author: 임하람
* Since: 2021/03/09
* Version 0.1
* Copyright (c) by H.R.LIM All right reserved.
* Modification Information
* 수정일   수정자    수정내용
*-----------------------------------------------------
*2021/03/09 최초생성
*-----------------------------------------------------
* </pre>
*/
package com.sist.feb.interest.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.sist.feb.interest.cmn.DTO;
import com.sist.feb.interest.cmn.WorkStandard;
import com.sist.feb.interest.domain.InterestVO;
import com.sist.feb.member.cmn.ConnectionMaker;
import com.sist.feb.member.cmn.JDBCUtil;

/**
 * @author 임하람
 *
 */
public class InterestDao implements WorkStandard {
	final Logger LOG = Logger.getLogger(InterestDao.class);
	
	public InterestDao(){ }//default 생성자
	
	

	@Override
	public InterestVO doSelectOne(DTO param) {
		
		InterestVO interest =null;
		InterestVO inVO =(InterestVO) param;
		
		LOG.debug("***InterestVO***doSelectOne()");
		LOG.debug("0.param"+inVO);
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		
		//return value
		ResultSet rs = null;
		try {
			connection = ConnectionMaker.getConnection();
			LOG.debug("2.데이터베이스 커넥션 구함 : "+connection);
			
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT interest_no,	\n");
			sb.append("       member_no,    \n");
			sb.append("       category_seq  \n");
			sb.append("FROM interest        \n");
			sb.append("WHERE interest_no = ?\n");
			
			LOG.debug("2.1. SQL쿼리실행  : \n"+sb.toString());
			
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("3.PreparedStatement  :"+pstmt);
			
			//param set
			pstmt.setInt(1, inVO.getInterest_no());
			
			rs = pstmt.executeQuery();
			LOG.debug("3.1 ResultSet: " + rs);
			
			if(rs.next() == true) {
				interest = new InterestVO();//객체
				
				interest.setInterest_no(rs.getInt("interest_no"));
				interest.setMember_no(rs.getInt("member_no"));
				interest.setCategory_seq(rs.getInt("category_seq"));
				
			}//--if
			
			LOG.debug("3.2 interest:"+interest);

		}catch(SQLException e) {
			LOG.debug("SQLException : "+e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(rs);
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
			
		}//--finally
		

		return interest;
	}//--doSelectOne

	

	@Override
	public List<InterestVO> doAllRetrieve(DTO param) {
		InterestVO inVO = (InterestVO) param;
		List<InterestVO> list = new ArrayList<InterestVO>();//return
		
		LOG.debug("***InterestVO***doAllRetrieve()");
		LOG.debug("0.param"+inVO);
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		
		//return value
		ResultSet rs =null;
		
		try {
			connection = ConnectionMaker.getConnection();
			
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT interest_no,	\n");
			sb.append("       member_no,    \n");
			sb.append("       category_seq  \n");
			sb.append("FROM interest        \n");
			sb.append("WHERE interest_no = ? \n");
			
			LOG.debug("2.1. SQL쿼리실행  : \n"+sb.toString());
			
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("3.PreparedStatement  :"+pstmt);
			
			//param set
			pstmt.setInt(1, inVO.getInterest_no());
			
			rs = pstmt.executeQuery();
			LOG.debug("3.1 ResultSet: " + rs);
			
			while(rs.next() == true) {
				InterestVO interestAll = new InterestVO();//객체
				
				interestAll.setInterest_no(rs.getInt("interest_no"));
				interestAll.setMember_no(rs.getInt("member_no"));
				interestAll.setCategory_seq(rs.getInt("category_seq"));
				
				list.add(interestAll);
				
			}//--while
			
			for(InterestVO vo:list) {
				LOG.debug("vo:" + vo);
			}//--for
			
	
		}catch(SQLException e) {
			LOG.debug("SQLException : "+e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(rs);
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
		}//--finally
		
		return list;
	}//--doAllRetrieve
	
	
	
	
	//카테고리 별로 게시물을 조회하거나, 모든 분야의 게시물을 조회만 하는 것이기때문에 
	//Insert 기능도 필요 없을 것 같음 (데이터를 넣고 수정하고 삭제하는 기능이 아니고  only read이기 때문에)
	@Override
	public int doInsert(DTO param) {
		
		
		return 0;
	}//--doInsert


}//--class
