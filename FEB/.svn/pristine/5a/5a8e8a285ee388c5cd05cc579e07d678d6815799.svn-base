/**
* <pre>
* com.sist.feb.picture.dao
* Class Name : PictureDao.java
* Description:
* Author: 
* Since: 2021/03/08
* Version 0.1
* Copyright (c) by H.R.LIM All right reserved.
* Modification Information
* 수정일   수정자    수정내용
*-----------------------------------------------------
*2021/03/08 최초생성
*-----------------------------------------------------
* </pre>
*/
package com.sist.feb.picture.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.sist.feb.member.cmn.JDBCUtil;
import com.sist.feb.picture.domain.PictureVO;
import com.sist.feb.post.cmn.PostDTO;
import com.sist.feb.post.dao.PostDao;

/**
 * @author khy81
 *
 */
public class PictureDao{
	
	final Logger LOG = Logger.getLogger(PictureDao.class);
	
	// 접속에 필요한 정보로 구성된 문자열(Connecting String)
	final static String DB_URL = "jdbc:oracle:thin:@211.238.142.124:1521/xe";
	final static String USER_ID = "feb";
	final static String USER_PASS = "sistfeb";
	
	public PictureDao() {
		
	}
	
	//jQuery이용해서 스크롤 내리면 목록이 더 보이는 걸로! 
	public List<PictureVO> doRetrieve(PostDTO param) {
		List<PictureVO> list = new ArrayList<PictureVO>();
		
		Connection connection 	= null;
		PreparedStatement pstmt = null;
		ResultSet rs 			= null;
		
		try {
			connection = getConnection();
			StringBuffer sb = new StringBuffer(50);
			
			sb.append(" SELECT *      \n");
			sb.append(" FROM picture  \n");
			
			
			
		}catch(SQLException e) {
			LOG.debug("SQLException: " + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(rs);
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
		}
		
		return list;
	}//--doRetrieve()
	
	public PictureVO doSelectOne(PostDTO param) {
		PictureVO picture = null;
		PictureVO inVO = (PictureVO) param;
		
		LOG.debug("doSelectOne()");
		LOG.debug("0. param:" + inVO);
		
		//DB접속 클래스
		Connection connection = null;
		PreparedStatement pstmt = null;
		
		//Retrun Value처리 (ResultSet)
		ResultSet rs = null; //return값을 받기위해
		
		try {
			//1.jdbc드라이버로딩, DB접속
			connection = getConnection();
			
			StringBuffer sb = new StringBuffer(500);
			sb.append(" SELECT           \n");
			sb.append("     pic_no,      \n");
			sb.append("     pic_group,   \n");
			sb.append("     path,        \n");
			sb.append("     pic_nm,      \n");
			sb.append("     save_nm      \n");
			sb.append(" FROM             \n");
			sb.append("     picture      \n");
			sb.append(" WHERE pic_no = ? \n");
			
			
			//3.쿼리 실행을 위한 객체 생성
			pstmt = connection.prepareStatement(sb.toString());
			
			pstmt.setInt(1,inVO.getPicNo());
			
			LOG.debug("2.1 쿼리실행 PreparedStatement: \n" + sb.toString());
			LOG.debug("3. 쿼리실행 PreparedStatement:" + connection);
			
			rs = pstmt.executeQuery();
			LOG.debug("4. ResultSet: " + rs);
			
			if(rs.next() == true ) {
				picture = new PictureVO();
				
				picture.setPicNo(rs.getInt("pic_no"));
				picture.setPicGroup(rs.getInt("pic_group"));
				picture.setPath(rs.getString("path"));
				picture.setPicNm(rs.getString("pic_nm"));
				picture.setSaveNm(rs.getString("save_nm"));
			}
			
			LOG.debug("5.picture"+picture);
			
		}catch(SQLException e) {
			LOG.debug("SQLException: " + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(rs);
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
		}
		return picture;
	}//--doSelectOne()
	
	public int doDelete(PostDTO param) {
		int flag =0;
		PictureVO inVO = (PictureVO) param;

		//DB접속 클래스
		Connection connection = null;
		PreparedStatement pstmt = null;
		
		try {
			//1.jdbc드라이버로딩, DB접속
			connection = getConnection();
			//오토커밋이 자동으로 작동되지 못하게
			connection.setAutoCommit(false);
			
			StringBuffer sb = new StringBuffer(50);
			//2.쿼리 실행
			sb.append(" DELETE FROM picture    \n");
			sb.append(" WHERE pic_no= ?   	   \n");
			
			//3.쿼리 실행을 위한 객체 생성
			pstmt = connection.prepareStatement(sb.toString());
			
			pstmt.setInt(1,inVO.getPicNo());
			
			LOG.debug("2.1 sql 쿼리 PreparedStatement: \n" + sb.toString());
			LOG.debug("3. 쿼리실행 PreparedStatement:" + connection);
			
			flag = pstmt.executeUpdate();
			LOG.debug("4. 쿼리실행 flag: " + flag);
			
			connection.commit();// 성공 시 커밋
			
		}catch(SQLException e) {
			try {
				connection.rollback();
			}catch(SQLException e1) {
				LOG.debug("SQLException: " + e1.getMessage());
				e1.printStackTrace();
			}
			LOG.debug("SQLException: " + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
		}
		
		return flag;
	}//--doDelete()
	
	
	public int doInsert(PostDTO param) {
		int flag =0;
		PictureVO inVO = (PictureVO) param;
		LOG.debug("0.param: "+inVO);
		
		//DB접속 클래스
		Connection connection = null;
		PreparedStatement pstmt = null;

		try {
			//1.jdbc드라이버로딩, DB접속
			connection = getConnection();
			
			//2.쿼리 실행
			StringBuffer sb = new StringBuffer(1000);
			
			sb.append(" INSERT INTO picture ( \n");
			sb.append("     pic_no,           \n");
			sb.append("     pic_group,        \n");
			sb.append("     path,             \n");
			sb.append("     pic_nm,           \n");
			sb.append("     save_nm           \n");
			sb.append(" ) VALUES (            \n");
			sb.append("     IMAGE_SEQ.NEXTVAL,   \n");
			sb.append("     IMG_GROUP_SEQ.NEXTVAL,\n");
			sb.append("     ?,                \n");
			sb.append("     ?,                \n");
			sb.append("     ?                 \n");
			sb.append(" )                     \n");
			
			//3.쿼리 실행을 위한 객체 생성
			pstmt = connection.prepareStatement(sb.toString());
			
//			pstmt.setInt(1, inVO.getPicNo());
//			pstmt.setInt(2, inVO.getPicGroup());
			pstmt.setString(1, inVO.getPath());
			pstmt.setNString(2, inVO.getPicNm());
			pstmt.setNString(3, inVO.getSaveNm());
			
			LOG.debug("2.1 sql 쿼리 PreparedStatement: \n" + sb.toString());
			LOG.debug("3. 쿼리실행 PreparedStatement:" + connection);
			
			//4.쿼리 실행 결과 처리 (flag=1(성공),2(실패))
			flag = pstmt.executeUpdate();
			LOG.debug("4. 쿼리실행 flag: " + flag);
			
		}catch (SQLException e) {
			LOG.debug("SQLException:" + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.close(pstmt);
			JDBCUtil.close(connection);
		}
		return flag;
	}//--doInsert메서드
	
	
	/**
	 * Driver 로딩,
	 * 
	 * @return Connection 중복코드를 메소드로 만들어서 사용하기
	 * @throws SQLException 
	 */
	public Connection getConnection() throws SQLException {
		Connection con = null; // 지역변수는메서드안에서만 쓰이는것

		try {
			//클래스 로더를 통해 해당 데이터베이스 드라이버 로드
			//JVM에게 해당 클래스의 정보를 로드한다.
			// 1. JDBC 드라이버 로딩
			Class.forName("oracle.jdbc.driver.OracleDriver"); // OracleDriver클래스의 위치 : ""안의 내용이 틀리면 예외처리됨(대소문자 구분됨)
		} catch (ClassNotFoundException e) {
			LOG.debug("ClassNotFoundException:" + e.getMessage());
			e.printStackTrace();
		}
		LOG.debug("1.JDBC 드라이버 로딩 성공!");

		// 2. 데이터베이스 커넥션(접속): Connection객체 생성
		con = DriverManager.getConnection(DB_URL, USER_ID, USER_PASS);

		LOG.debug("2. 데이터베이스 커넥션 구함:" + con);
		return con;
	}//--getConnection
	

}//--class











